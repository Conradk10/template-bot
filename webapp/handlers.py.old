from datetime import datetime, timedelta

from aiogram.utils.exceptions import ChatNotFound

from aiohttp import web
from aiohttp.web_request import Request
from aiohttp.web_response import json_response

from loader import dp, bot
from data import config
from utils.web_app import safe_parse_webapp_init_data
from utils.db.sqliter import get_free_sql
from utils import get_list_from_string, is_admin, system_kb

SEND_MESSAGE_DELTA = {}  # Prevent flood by `Send Message Function`
CHECK_DATA_DELTA = {}

# /web-ping
async def web_ping(request):
    return json_response({"ok": True})

# /checkUserData
async def web_check_user_data(request: Request):
    data = await request.post()

    if not data.get("_auth"):
        return json_response({"ok": False, "error": "Unauthorized"}, status=401)

    data = safe_parse_webapp_init_data(config.BOT_TOKEN, data.get("_auth"))

    last_ip = request.headers.get("X-FORWARDED-FOR", None)
    user_data = get_free_sql("SELECT * FROM users WHERE uid = %s", (data["user"]["id"],))
    user_ips = get_list_from_string(user_data["ip_list"])
    user_tituls = get_list_from_string(user_data["all_tituls"])

    if 11 not in user_tituls:
        try:
            await bot.send_message(
                chat_id=user_data["uid"],
                text="üéÅ <b>–ò–∑–ª–∏—à–Ω–∏–π –∏–Ω—Ç–µ—Ä–µ—Å –Ω–µ –≤—Å–µ–≥–¥–∞ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è–º!</b>\n\n<i>–ü–æ—Ö–æ–∂–µ, –≤ –≤–∞—à–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –ø–æ—è–≤–∏–ª–æ—Å—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ... (/menu -> –¢–∏—Ç—É–ª—ã)</i>",
                reply_markup=system_kb)
            user_tituls.append(11)
            get_free_sql("UPDATE users SET all_tituls = %s WHERE uid = %s",
                            (str(user_tituls), user_data["uid"],))
        except Exception as err: 
            print(err)
            pass
    if last_ip not in user_ips:
        user_ips.append(last_ip)
        get_free_sql("UPDATE users SET ip_list = %s WHERE uid = %s", (str(user_ips), user_data["uid"],))


    CHECK_DATA_DELTA.update({data["user"]["id"]: datetime.utcnow()})
    r_data = get_list_from_string(str(data.values))["user"]
    r_data["is_admin"] = is_admin(user_data["uid"])
    return json_response({"ok": True, "user": r_data}, status=200)


async def web_search_user(request: Request):
    data = request.post()
    if not data.get("_auth"):
        return json_response({"ok": False, "error": "Unauthorized"}, status=401)

    try:
        web_app_data = safe_parse_webapp_init_data(token=config.BOT_TOKEN, init_data=data.get("_auth"))
    except ValueError:
        return json_response({"ok": False, "error": "Unauthorized"}, status=401)

    search_query = data.get("search_query", None)
    if search_query.is_digit():
        result = get_free_sql("SELECT uid FROM users WHERE uid = %s", (search_query,), fetchall=True)
    else:
        result = get_free_sql("SELECT uid FROM users WHERE username LIKE %s", (f"%{search_query}%",), fetchall=True)
    return {"ok": True, "result": result}

async def web_get_user_data(request: Request):
    data = await request.post()
    if not data.get("_auth"):
        return json_response({"ok": False, "error": "Unauthorized"}, status=401)

    try:
        web_app_data = safe_parse_webapp_init_data(token=config.BOT_TOKEN, init_data=data.get("_auth"))
    except ValueError:
        return json_response({"ok": False, "error": "Unauthorized"}, status=401)

    if web_app_data["user"]["id"] not in CHECK_DATA_DELTA:
        CHECK_DATA_DELTA.update({web_app_data["user"]["id"]: datetime.utcnow() - timedelta(seconds=100)})

    delta = CHECK_DATA_DELTA.get(web_app_data["user"]["id"])

    if (datetime.utcnow() - delta) < timedelta(seconds=1):
        return json_response({"ok": False, "error": "ratelimit"}, status=429)

    request_user_id = data.get("request_user_id", web_app_data["user"]["id"])
    answer_data = {}
    requested_user_data = get_free_sql("SELECT * FROM users WHERE uid = %s", (request_user_id,))
    requested_user_tituls = get_list_from_string(requested_user_data["all_tituls"])

    if not requested_user_data:
        return json_response({"ok": False, "error": "Unknown user"}, status=404)

    requester_user_data = get_free_sql("SELECT * FROM users WHERE uid = %s", (web_app_data["user"]["id"],))

    if requested_user_data["uid"] != requester_user_data["uid"]:
        get_free_sql("UPDATE users SET profile_views = profile_views + 1 WHERE uid = %s", (requested_user_data["uid"],))
        if requested_user_data["profile_views"]+1 >= 10:
            if 12 not in requested_user_tituls:
                try:
                    await bot.send_message(
                        chat_id=requested_user_data["uid"],
                        text="üéÅ <b>–¢—ã –ø–æ–ø—É–ª—è—Ä–µ–Ω, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é!</b>\n\n<i>–ü–æ—Ö–æ–∂–µ, –≤ –≤–∞—à–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –ø–æ—è–≤–∏–ª–æ—Å—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ... (/menu -> –¢–∏—Ç—É–ª—ã)</i>",
                        reply_markup=system_kb)
                    requested_user_tituls.append(12)
                    get_free_sql("UPDATE users SET all_tituls = %s WHERE uid = %s",
                            (str(requested_user_tituls), requested_user_data["uid"],))
                except:
                    pass
    answer_data = {
        "uid": requested_user_data["uid"],
        "regtime": requested_user_data["regtime"].timestamp(),
        "username": requested_user_data["username"],
        "tituls": len(get_list_from_string(requested_user_data["all_tituls"])),
        "active": requested_user_data["active"],
        "profile_views": requested_user_data["profile_views"]
    }    
    if is_admin(requester_user_data["uid"]) >= 1:
        requested_user_ban_data = get_list_from_string(requested_user_data["ban"]) if requested_user_data["ban"] else None
        requested_user_mute_data = get_list_from_string(requested_user_data["mute"]) if requested_user_data["mute"] else None
        answer_data["admin_info"] = {
            "is_admin": is_admin(requested_user_data["uid"]),
            "banned": {
                "bantime": requested_user_ban_data["bantime"],
                "admin": requested_user_ban_data["banned_by"]
            } if requested_user_data["ban"] else False,
            "muted": {
                "mutetime": requested_user_mute_data["mutetime"],
                "admin": requested_user_mute_data["muted_by"]
            } if requested_user_data["mute"] else False,
            "warns": requested_user_data["warns"],
            "sended_messages_count": requested_user_data["total_msg"] if is_admin(requester_user_data["uid"]) > 1 else None,
            "last_msg": requested_user_data["last_msg"].timestamp() if is_admin(requester_user_data["uid"]) > 1 else None
        }
    CHECK_DATA_DELTA.update({web_app_data["user"]["id"]: datetime.utcnow()})
    return json_response({"ok": True, "data": answer_data}, status=200)


# /sendMessage
async def web_send_message(request: Request):
    return json_response({"ok": False, "error": "go away"}, status=502)
    data = await request.post()
    if not data.get("_auth"):
        return json_response({"ok": False, "error": "Unauthorized"}, status=401)

    try:
        web_app_data = safe_parse_webapp_init_data(token=config.BOT_TOKEN, init_data=data.get("_auth"))
    except ValueError:
        return json_response({"ok": False, "error": "Unauthorized"}, status=401)

    web_app_user_id = web_app_data["user"]["id"]

    if web_app_user_id not in SEND_MESSAGE_DELTA:
        SEND_MESSAGE_DELTA.update({web_app_user_id: datetime.utcnow() - timedelta(seconds=100)})

    delta = SEND_MESSAGE_DELTA.get(web_app_user_id)

    if (datetime.utcnow() - delta) < timedelta(seconds=5):
        return json_response({"ok": False, "error": "ü•∂ You are to fast. Please wait for 5 seconds"})

    user_id, text = data.get("user_id"), data.get("text")

    if user_id is None or not text:
        return json_response({"ok": False, "error": "üíÅ‚Äç‚ôÇÔ∏è UserID and Text inputs required"})

    try:
        SEND_MESSAGE_DELTA.update({web_app_user_id: datetime.utcnow()})
        await dp.bot.send_message(chat_id=user_id, text=text)

    except ChatNotFound:
        return json_response({"ok": False, "error": "Chat Not Found"})

    except Exception as exc:
        print(exc)
        return json_response({"ok": False, "error": "Exception caused"})

    else:
        return json_response({"ok": True})


app = web.Application()
app.add_routes([web.get('/webapp/ping', web_ping),
                web.post('/webapp/sendMessage', web_send_message),
                web.post('/webapp/checkUserData', web_check_user_data),
                web.post('/webapp/getUserData', web_get_user_data),
                web.post('/webapp/searchUser', web_search_user)])
