from loader import bot
from utils import get_free_sql, get_user_data, update_user_respect
from loguru import logger


async def do_payday():
    """
    –ü–µ–π–¥–µ–π
    TODO: –í–æ –≤—Ä–µ–º—è –ø–µ–π–¥–µ–π:
    TODO: –ò–≥—Ä–æ–∫–∞–º: –ø—Ä–∏–±–∞–≤–ª—è—Ç—å –æ–ø—ã—Ç
    TODO:
    """
    logger.info("Payday started")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ–π–¥–µ—è
    payday_data = get_free_sql(
        "SELECT setting, int_value FROM settings "
        "WHERE setting IN ('payday_exp')",
        fetchall=True
    )
    # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ–ø—ã—Ç–∞, –º–Ω–æ–∂–∏—Ç–µ–ª—å –∑–∞—Ä–ø–ª–∞—Ç—ã, –ø–æ—Å–æ–±–∏–µ –æ –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü–µ
    payday_exp = 1
    for _ in payday_data:
        if _['setting'] == 'payday_exp':
            payday_exp = _['int_value']

    # –ë–µ—Ä–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø–µ–π–¥–µ—è - 168 —á–∞—Å–æ–≤ (1 –Ω–µ–¥–µ–ª—è)
    pd_interval = (get_free_sql("SELECT DATE_ADD(SYSDATE(), INTERVAL -168 HOUR) AS pd_interval"))["pd_interval"]

    # –í—Å–µ–º —é–∑–µ—Ä–∞–º –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Å–ø–µ–∫—Ç—ã
    get_free_sql(
        "UPDATE users SET "
        ""
        "respect = respect + %s "
        "WHERE last_action >= %s",
        (payday_exp,
         pd_interval)
    )

    # –ë–µ—Ä–µ–º –≤—Å–µ—Ö —é–∑–µ—Ä–æ–≤ –∫—Ç–æ –±—ã–ª –æ–Ω–ª–∞–π–Ω –∑–∞ —á–∞—Å
    users_data = get_free_sql(
        "SELECT * FROM users WHERE last_action >= %s",
        (pd_interval,),
        fetchall=True
    )

    for user_data in users_data:
        await update_user_respect(user_data['uid'], user_data=user_data)

    logger.info("Payday OK")
    return True


async def do_checkout():
    """ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤—Å–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–∞–Ω–∫–æ–≤—Å–∫–æ–º —á–µ–∫–µ """
    logger.info("Checkout started")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ–π–¥–µ—è
    payday_data = get_free_sql(
        "SELECT setting, int_value FROM settings "
        "WHERE setting IN ('payday_exp', 'payday_salary', 'payday_nojob')",
        fetchall=True
    )
    # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ–ø—ã—Ç–∞, –º–Ω–æ–∂–∏—Ç–µ–ª—å –∑–∞—Ä–ø–ª–∞—Ç—ã, –ø–æ—Å–æ–±–∏–µ –æ –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü–µ
    payday_exp, payday_salary, payday_nojob = 0, 0, 0
    for _ in payday_data:
        if _['setting'] == 'payday_exp':
            payday_exp = _['int_value']
        elif _['setting'] == 'payday_salary':
            payday_salary = _['int_value']
        elif _['setting'] == 'payday_nojob':
            payday_nojob = _['int_value']

    # –ë–µ—Ä–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø–µ–π–¥–µ—è - 168 —á–∞—Å–æ–≤ (1 –Ω–µ–¥–µ–ª—è)
    pd_interval = (get_free_sql("SELECT DATE_ADD(SYSDATE(), INTERVAL -168 HOUR) AS pd_interval"))["pd_interval"]

    # –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ–º
    get_free_sql(
        "UPDATE users SET "
        ""
        "money = money + salary * %s, "
        "last_salary = salary * %s, "
        "salary = 0, "
        "money = money + IF(job <= 0, %s, 0) "
        ""
        "WHERE last_action >= %s",
        (payday_salary, payday_salary, payday_nojob,
         pd_interval)
    )

    # –ë–µ—Ä–µ–º –≤—Å–µ—Ö —é–∑–µ—Ä–æ–≤ –∫—Ç–æ –±—ã–ª –æ–Ω–ª–∞–π–Ω –∑–∞ —á–∞—Å
    users_data = get_free_sql(
        "SELECT * FROM users WHERE last_action >= %s",
        (pd_interval,),
        fetchall=True
    )

    # Payday —Ä–∞—Å—Å—ã–ª–∫–∞ –∏ –ø–µ—Ä–µ—Å—á–µ—Ç
    for user_data in users_data:
        user_data = await get_user_data(user_data['uid'], user_data=user_data, fast_mode=True)

        text = 'üßæ <b>–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π —á–µ–∫</b>\n\n' \
               f'<b>–£—Ä–æ–≤–µ–Ω—å</b>: <code>{user_data["level"]}</code>\n' \
               f'<b>–£–≤–∞–∂–µ–Ω–∏–µ</b>: <code>{user_data["curr_respect"]}</code>/' \
               f'<code>{user_data["next_respect"]}</code>\n' \
               f'<b>–ó–∞—Ä–ø–ª–∞—Ç–∞</b>: $<code>{user_data["last_salary"]}</code>\n'
        if user_data['job'] <= 0:
            text += f'<b>–ü–æ—Å–æ–±–∏–µ –ø–æ –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü–µ</b>: $<code>{payday_nojob}</code>\n'
        await bot.send_message(user_data['uid'], text=text)

    logger.info("Checkout OK")

    return True
