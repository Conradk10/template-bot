from loader import dp
from aiogram import types
from utils import get_online_users
from aiogram.dispatcher.filters import Text


@dp.message_handler(Text(startswith=['–º–µ–Ω—é'], ignore_case=True))
@dp.message_handler(commands=['menu'])
async def cmd_menu(message: types.Message, user_data: dict):
    text, kb = await get_menu_text(user_data)
    await message.reply(text, reply_markup=kb)


async def get_menu_text(user_data: dict) -> (str, types.InlineKeyboardMarkup):
    online_users = get_online_users()
    text = f'üñ≤ ‚ñ∫ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n' \
           f'<b>–ò–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω</b>: <code>{len(online_users)}</code>'
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞', callback_data='mm m:st'))
    return text, kb


async def get_menu_statistics_text(user_data: dict) -> (str, types.InlineKeyboardMarkup):
    text = f'üìá ‚ñ∫ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</b>\n\n' \
           f'<b>–ò–º—è</b> ‚Äì {user_data["fullname"]}\n' \
           f'<b>–ü–æ–ª</b> ‚Äì {user_data["sex"]}\n' \
           f'<b>–£—Ä–æ–≤–µ–Ω—å</b> ‚Äì <code>{user_data["level"]}</code>\n' \
           f'<b>–£–≤–∞–∂–µ–Ω–∏–µ</b> ‚Äì <code>{user_data["curr_respect"]}</code>/' \
           f'<code>{user_data["next_respect"]}</code>\n' \
           f'<b>–î–µ–Ω—å–≥–∏</b> ‚Äì $<code>{user_data["money"]}</code>\n\n' \
           f'<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> ‚Äì (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)\n' \
           f'<b>–î–µ–Ω—å–≥–∏ –≤ –±–∞–Ω–∫–µ</b> ‚Äì (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)\n' \
           f'<b>–†–∞–±–æ—Ç–∞</b> ‚Äì (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)\n\n' \
           f'<b>–ó–∞–∫–æ–Ω–æ–ø–æ—Å–ª—É—à–Ω–æ—Å—Ç—å</b> ‚Äì (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)\n' \
           f'<b>–ù–æ–º–µ—Ä –¥–æ–º–∞</b> ‚Äì (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)'
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='mm'))
    return text, kb


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('mm'))
async def cb_menu(callback_query: types.CallbackQuery, user_data: dict, call_args: dict):

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if call_args.get('m') == 'st':
        text, kb = await get_menu_statistics_text(user_data)
        await callback_query.message.edit_text(text, reply_markup=kb)
        await callback_query.answer()
        return

    text, kb = await get_menu_text(user_data)
    await callback_query.message.edit_text(text, reply_markup=kb)
    await callback_query.answer()
