import math

from loader import dp
from aiogram import types
from aiogram.dispatcher.filters import Text
from utils import get_all_locations, get_free_sql, get_distanse_between_coords, humanize


@dp.message_handler(Text(startswith=['–Ω–∞–≤–∏–≥–∞—Ç–æ—Ä'], ignore_case=True))
@dp.message_handler(commands=['gps'])
async def cmd_gps(message: types.Message, user_data: dict):
    text, kb = await get_gps_text(user_data)
    await message.reply(text, reply_markup=kb)


async def get_gps_text(user_data: dict):
    locations_data, locations_count = get_all_locations(user_data)
    near_locations = []
    for location_data in locations_data:
        if location_data['distance_to_user'] < 100:
            near_locations.append(
                f"{location_data['title'].lower()} ({round(location_data['distance_to_user'])} –º)"
            )
    text = 'üß≠ ‚ñ∫ <b>–ù–∞–≤–∏–≥–∞—Ç–æ—Ä</b>\n\n' \
           f'<b>–í—Å–µ–≥–æ –º–µ—Å—Ç</b>: <code>{locations_count}</code>\n' \
           f'<b>–ú–µ—Å—Ç–∞ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏</b>: {", ".join(near_locations) if near_locations else "–Ω–∏—á–µ–≥–æ"}'
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton(f'–ú–µ—Å—Ç–∞ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ ({len(near_locations)})',
                                      callback_data='gps m:np'))
    kb.add(types.InlineKeyboardButton(f'–í–∞–∂–Ω—ã–µ –º–µ—Å—Ç–∞',
                                      callback_data='gps m:ip'))
    kb.add(types.InlineKeyboardButton(f'–û–±–Ω–æ–≤–∏—Ç—å',
                                      callback_data='gps'))
    return text, kb


async def get_locations_list_text(user_data: dict, page: int):
    locations_data, locations_count = get_all_locations(user_data, page)
    text = 'üß≠ ‚ñ∫ <b>–ù–∞–≤–∏–≥–∞—Ç–æ—Ä</b>\n\n' \
           f'<b>–í—Å–µ–≥–æ –º–µ—Å—Ç</b>: <code>{locations_count}</code>'

    kb = types.InlineKeyboardMarkup()
    for location in locations_data:
        kb.add(types.InlineKeyboardButton(f'{location["title"]} ({location["distance_to_user"]} –º)',
                                          callback_data=f'gps m:li p:{page} id:{location["id"]}'))

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    max_pages = math.ceil(locations_count / 6)
    if max_pages > 1:
        kb.add(types.InlineKeyboardButton('–ü—Ä–µ–¥. —Å—Ç—Ä.' if page > 1 else ' ',
                                          callback_data=f'gps m:ip p:{page - 1}' if page > 1 else 'none'))
        kb.insert(types.InlineKeyboardButton(f'- {page}/{max_pages} -', callback_data=f'none'))
        kb.insert(types.InlineKeyboardButton('–°–ª–µ–¥. —Å—Ç—Ä.' if page < max_pages else ' ',
                                             callback_data=f'gps m:ip p:{page + 1}' if page < max_pages else 'none'))
    kb.add(types.InlineKeyboardButton(f'–ù–∞–∑–∞–¥', callback_data='gps'))
    return text, kb


async def get_location_text(user_data: dict, location_id: int, back_to: str, page: int):
    location_data = get_free_sql("SELECT * FROM locations WHERE id = %s", (location_id,))

    location_data['distance_to_user'] = round(get_distanse_between_coords(
        user_data['x_pos'], user_data['y_pos'],
        location_data['x_pos'], location_data['y_pos']
    ) * 2)

    vehicles_info = []
    vehicles_buttons = []
    for vehicle in user_data['user_vehicles']:
        vehicles_info.append(
            f' ‚Äì <b>{vehicle["title"]}</b>: '
            f'{humanize.naturaldelta(location_data["distance_to_user"] / vehicle["speed"])}\n'
        )
        vehicles_buttons.append(
            types.InlineKeyboardButton(f'–ï—Ö–∞—Ç—å: {vehicle["title"]}',
                                       callback_data=f'gotoloc veh:{vehicle["id"]} id:{location_data["id"]}')
        )

    text = 'üß≠ ‚ñ∫ <b>–ù–∞–≤–∏–≥–∞—Ç–æ—Ä</b>\n\n' \
           f'üö© <b>{location_data["title"]}</b>\n' \
           f' ‚Äì <b>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ</b>: <code>{location_data["distance_to_user"]}</code> –º\n\n' \
           f'‚è≥ <b>–í—Ä–µ–º—è –≤ –ø—É—Ç–∏</b>:\n' \
           f' ‚Äì <b>–ü–µ—à–∫–æ–º</b>: {humanize.naturaldelta(location_data["distance_to_user"] / 1.5)}\n' \
           f'{"".join(vehicles_info)}\n'\
           f'‚ÑπÔ∏è <i>–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–∑–≤–∞—Ç—å —Ç–∞–∫—Å–∏ —á–µ—Ä–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω</i>'
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton(f'–ò–¥—Ç–∏: –ø–µ—à–∫–æ–º',
                                      callback_data=f'gotoloc veh:0 id:{location_data["id"]}'))
    [kb.add(x) for x in vehicles_buttons]
    kb.add(types.InlineKeyboardButton(f'–ù–∞–∑–∞–¥', callback_data=f'gps m:{back_to} p:{page}'))
    return text, kb


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('gps'))
async def cb_menu(callback_query: types.CallbackQuery, user_data: dict, call_args: dict):
    call_answer = '‚úÖ'

    # –ú–µ—Å—Ç–∞ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏
    if call_args.get('m') == 'np':
        text, kb = await get_gps_text(user_data)
    # –í–∞–∂–Ω—ã–µ –º–µ—Å—Ç–∞
    elif call_args.get('m') == 'ip':
        page = int(call_args.get('p', 1))
        text, kb = await get_locations_list_text(user_data, page)
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–∫–∞—Ü–∏–∏
    elif call_args.get('m') == 'li':
        back_to_menu = call_args.get('bt', 'ip')
        page = call_args.get('p', 1)
        location_id = call_args.get('id')
        text, kb = await get_location_text(user_data, location_id, back_to_menu, page)
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å–æ–≤–ø–∞–ª–æ
    else:
        text, kb = await get_gps_text(user_data)

    await callback_query.message.edit_text(text, reply_markup=kb)
    await callback_query.answer(call_answer)
