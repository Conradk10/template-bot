from loader import dp
from aiogram import types


@dp.message_handler(commands=['register'])
async def cmd_register(message: types.Message, user_data: dict):
    text, kb = await get_register_text(user_data, state=0)
    await message.answer(text, reply_markup=kb)


async def get_register_text(user_data: dict, state: int) -> (str, types.InlineKeyboardMarkup):
    if state == 1:
        text = '<i>*–í—ã —Å–∞–¥–∏—Ç–µ—Å—å –≤ —Å–∞–º–æ–ª–µ—Ç –∏ —É–ª–µ—Ç–∞–µ—Ç–µ –∏–∑ —Å–≤–æ–µ–≥–æ —Ä–æ–¥–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞*</i>'
        kb = types.InlineKeyboardMarkup(row_width=1)
        kb.insert(types.InlineKeyboardButton('–î–∞–ª–µ–µ', callback_data='register a:next p:2'))
    elif state == 2:
        text = '<i>*–í—ã –ø—Ä–∏–ª–µ—Ç–µ–ª–∏ –≤ –≥–æ—Ä–æ–¥ —Å–≤–æ–µ–π –º–µ—á—Ç—ã –∏ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å –æ—Ñ–æ—Ä–º–ª—è—Ç—å ' \
               '–¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–π —Å—Ç–æ–ª*</i>\n\n' \
               '<b>–í—ã</b>: - –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –º–Ω–µ –Ω—É–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Å–ø–æ—Ä—Ç–∞.\n' \
               '<b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫</b>: - –ë—É–¥—å—Ç–µ –¥–æ–±—Ä—ã, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤–æ—Ç —ç—Ç—É –∞–Ω–∫–µ—Ç—É... <i>*–í–∞–º –ø–µ—Ä–µ–¥–∞–ª–∏ –∞–Ω–∫–µ—Ç—É*</i>'
        kb = types.InlineKeyboardMarkup(row_width=1)
        kb.insert(types.InlineKeyboardButton(
            '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É', web_app=types.WebAppInfo(url='https://vistate.x-net.pp.ua/register.html')
        ))
        # kb.insert(types.InlineKeyboardButton('–î–∞–ª–µ–µ', callback_data='register a:next p:3'))
    elif state == 3:
        text = '<i>*–í—ã –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ –±—É–º–∞–≥–∏ –∏ –ø–æ–∫–∏–Ω—É–ª–∏ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–π —Å—Ç–æ–ª*</i>'
        kb = types.InlineKeyboardMarkup(row_width=1)
        kb.insert(types.InlineKeyboardButton('–î–∞–ª–µ–µ', callback_data='register a:next p:4'))
    elif state == 4:
        text = '<i>*–ü–æ –ø—É—Ç–∏ –Ω–∞ –≤–æ–∫–∑–∞–ª –í–∞—Å –≤—Å—Ç—Ä–µ—Ç–∏–ª –∫–∞–∫–æ–π-—Ç–æ –Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü*</i>\n\n' \
               '<b>–ù–µ–∑–Ω–∞–∫–æ–º–µ—Ü</b>: - –≠–π, –ø—Ä–∏–≤–µ—Ç! –ù–æ–≤—ã–µ –ª—é–¥–∏ –≤ —à—Ç–∞—Ç–µ?\n' \
               '<b>–í—ã</b>: - –î–∞, —è —Ç–æ–ª—å–∫–æ –∏–∑ –ø–∞—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ç–æ–ª–∞.\n' \
               '<b>–ù–µ–∑–Ω–∞–∫–æ–º–µ—Ü</b>: - –¢–µ–±–µ –æ—á–µ–Ω—å –ø–æ–≤–µ–∑–ª–æ! ' \
               '–í –ø–∞—Å–ø–æ—Ä—Ç–Ω–æ–º —Å—Ç–æ–ª–µ —Å–∫–∞–∑–∞–ª–∏ —á—Ç–æ –∑–∞ –ø–∞—Å–ø–æ—Ä—Ç–æ–º –µ—â–µ –∑–∞–π—Ç–∏ –Ω—É–∂–Ω–æ?\n' \
               '<b>–í—ã</b>: - –≠–º–º.. –ù–µ—Ç.\n' \
               '<b>–ù–µ–∑–Ω–∞–∫–æ–º–µ—Ü</b>; - –¢–æ–≥–¥–∞ —è —Å–∫–∞–∂—É: –∑–∞ –ø–∞—Å–ø–æ—Ä—Ç–æ–º –Ω—É–∂–Ω–æ ' \
               '–∑–∞–π—Ç–∏ –≤ –º—ç—Ä–∏—é, –±–µ–∑ –Ω–µ–≥–æ –Ω–∏–∫—É–¥–∞. –ö—Å—Ç–∞—Ç–∏, –º–µ–Ω—è –¢–æ–º–º–∏ –∑–æ–≤—É—Ç, –±—É–¥–µ–º –∑–Ω–∞–∫–æ–º—ã.\n' \
               f'<b>–í—ã</b>: - –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, –¢–æ–º–º–∏, –º–µ–Ω—è –∑–æ–≤—É—Ç {user_data["surname"]}.\n' \
               '<b>–¢–æ–º–º–∏</b>: - –ù–∞–ø—Ä–∞–≤–ª—è–π—Å—è –≤ –º—ç—Ä–∏—é –∑–∞ –ø–∞—Å–ø–æ—Ä—Ç–æ–º –∏ ' \
               f'–≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∫–æ –º–Ω–µ, —É –º–µ–Ω—è –µ—â–µ –±—É–¥–µ—Ç –¥–ª—è —Ç–µ–±—è —Ä–∞–±–æ—Ç–µ–Ω–∫–∞. ' \
               f'–£–¥–∞—á–∏, {user_data["surname"]}.\n' \
               '<b>–í—ã</b>: - –õ–∞–¥–Ω–æ, –±—ã–≤–∞–π, –¢–æ–º–º–∏.\n\n' \
               'üìå <b>–ö–≤–µ—Å—Ç</b>: –Ω–∞–ø—Ä–∞–≤–ª—è–π—Ç–µ—Å—å –≤ –º—ç—Ä–∏—é –∑–∞–±—Ä–∞—Ç—å –ø–∞—Å–ø–æ—Ä—Ç.\n' \
               '‚ÑπÔ∏è <b>–°–æ–≤–µ—Ç</b>: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É "–ù–∞–≤–∏–≥–∞—Ç–æ—Ä" –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —à—Ç–∞—Ç—É.'
        kb = types.InlineKeyboardMarkup(row_width=1)
        # kb.insert(types.InlineKeyboardButton('–î–∞–ª–µ–µ', callback_data='register a:next p:5'))
    else:
        text = '<i>*–ù–µ–∫–æ—Ç–æ—Ä—ã–º –≤—Ä–µ–º–µ–Ω–µ–º —Ä–∞–Ω–µ–µ*</i>\n\n' \
               '<b>?</b>: - –ö–∞–∫ –∂–µ –±—ã—Å—Ç—Ä–æ –ª–µ—Ç–∏—Ç –≤—Ä–µ–º—è, ' \
               '—Ç–æ–ª—å–∫–æ –Ω–µ–¥–∞–≤–Ω–æ –º—ã –≤–º–µ—Å—Ç–µ —Å–∏–¥–µ–ª–∏ –∑–∞ –ø–∞—Ä—Ç–æ–π, ' \
               '–Ω–æ, –≤–æ—Ç —Ç—ã —É–∂–µ —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è –≤ –ø—É—Ç—å...\n' \
               '<b>–í—ã</b>: - –í—ã–±—Ä–∞—Ç—å—Å—è –∏–∑ —ç—Ç–æ–π –¥—ã—Ä—ã –≤—Å–µ–≥–¥–∞ ' \
               '–±—ã–ª–æ –º–æ–µ–π –º–µ—á—Ç–æ–π! –ù–∞–¥–µ—é—Å—å –≤ –Ω–æ–≤–æ–º –º–µ—Å—Ç–µ —è ' \
               '–¥–æ–±—å—é—Å—å –≤—Å–µ—Ö —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π.\n' \
               '<b>?</b>: - –£ –º–µ–Ω—è –∫–æ–µ —á—Ç–æ –¥–ª—è —Ç–µ–±—è –µ—Å—Ç—å.. ' \
               '–î–µ—Ä–∂–∏, —ç—Ç–æ –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä, —Ç–µ–±–µ –æ–Ω —Ç–æ—á–Ω–æ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è! ' \
               '<i>*–í—ã –≤–∑—è–ª–∏ –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä*</i>'
        kb = types.InlineKeyboardMarkup(row_width=1)
        kb.insert(types.InlineKeyboardButton('–î–∞–ª–µ–µ', callback_data='register a:next p:1'))
    return text, kb


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('register'))
async def cb_menu(callback_query: types.CallbackQuery, user_data: dict, call_args: dict):

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if call_args.get('a') == 'next':
        state = int(call_args.get('p'))
        text, kb = await get_register_text(user_data, state=state)
        await callback_query.message.delete_reply_markup()
        await callback_query.message.answer(text, reply_markup=kb)
        await callback_query.answer()
